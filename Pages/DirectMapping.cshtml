@page
@using CacheSimulatorWebApp.Util
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model CacheSimulatorWebApp.Pages.DirectMappingModel
@{
    ViewData["Title"] = "Direct Mapping";
}

<style>
    .bordered-div {
        border: 2px solid black;
        padding: 10px;
    }
</style>

<style>
    .subtitle-h4 {
        font-weight: bold;
        margin-bottom: 10px;
    }
</style>

<style>
    .scrollable-div {
        width: 200px; /* Fixed width */
        height: 400px; /* Fixed height */
        border: 1px solid #ccc; /* Optional border for better visibility */
        padding: 10px; /* Optional padding */
        overflow-y: auto; /* Adds vertical scrollbar when content overflows */
        overflow-x: hidden; /* Prevents horizontal scrollbar */
        background-color: #f9f9f9; /* Optional background color */
    }
</style>

<style>
    .selected-memory-block-p {
        background-color: #0dcaf0;
        padding: 5px;
    } 
</style>

<div class="d-flex justify-content-center mb-3">
    <h2>@ViewData["Title"]</h2>
</div>


<form method="post">
    
    @Html.AntiForgeryToken()
    
    <div class="container">
        <h4 class="subtitle-h4">Cache settings:</h4>
        <div class="d-flex justify-content-between align-items-center">
            <!-- Left Column: Dropdowns -->
            <div class="col mb-6">
                <!-- Write Policy Dropdown -->
                <div class="row mb-3">
                    <div class="col-md-4 d-flex align-items-center">
                        <p class="mb-0 me-1">Write policy:</p>
                    </div>
                    <div class="col-md-8 w-auto">
                        @Html.DropDownListFor(m => m.SelectedWritePolicyEnum,
                            new SelectList(Enum.GetValues(typeof(WritePolicyEnum))), new { @class = "form-control" })
                    </div>
                </div>

                <!-- Write Policy on Miss Dropdown -->
                <div class="row mb-3">
                    <div class="col-md-4 d-flex align-items-center">
                        <p class="mb-0 me-1">Write policy on miss:</p>
                    </div>
                    <div class="col-md-8 w-auto">
                        @Html.DropDownListFor(m => m.SelectedWriteOnMissPolicyEnum,
                            new SelectList(Enum.GetValues(typeof(WriteOnMissPolicyEnum))), new { @class = "form-control" })
                    </div>
                </div>
            </div>

            <!-- Right Column: Text Inputs -->
            <div class="col-md-6">
                <!-- Cache Size Text Input -->
                <div class="row mb-3">
                    <div class="col-md-4 d-flex align-items-center">
                        <p class="mb-0 me-1">Cache size:</p>
                    </div>
                    <div class="col-md-8 w-auto">
                        @Html.TextBoxFor(m => m.SelectedCacheSize, new { @class = "form-control", placeholder = "Power of 2" })
                    </div>
                </div>

                <!-- Memory Size Text Input -->
                <div class="row mb-3">
                    <div class="col-md-4 d-flex align-items-center">
                        <p class="mb-0 me-1">Memory size:</p>
                    </div>
                    <div class="col-md-8 w-auto">
                        @Html.TextBoxFor(m => m.SelectedMemorySize, new { @class = "form-control", placeholder = "Power of 2" })
                    </div>
                </div>
            </div>
            
            <!-- Submit button -->
            <div>
                <button type="submit" asp-page-handler="SubmitCacheSettings" class="btn btn-primary">Submit settings</button>
            </div>
        </div>

        <!-- Instruction Section -->
        <div class="mb-3" style="margin-left: 0; padding-left: 0;">
            <div class="d-flex justify-content-between">
                <div class="col" style="max-width: 400px;">
                    <h4 class="subtitle-h4">Instruction:</h4>

                    <!-- Radio buttons for instruction and current address -->
                    <div class="d-flex justify-content-start mb-3">
                        <div class="d-flex me-3">
                            <div class="me-3">
                                @Html.RadioButtonFor(
                                    m => m.SelectedInstruction,
                                    "Read/Load",
                                    new { @class = "form-check-input", id = "read" })
                            </div>
                            <label class="form-check-label" for="read">Read/Load</label>
                        </div>
                        
                        <div class="vr mx-3"></div>
                        
                        <div class="d-flex me-3">
                            <div class="me-3">
                                @Html.RadioButtonFor(
                                    m => m.SelectedInstruction,
                                    "Write/Store",
                                    new { @class = "form-check-input", id = "write" })
                            </div>
                            <label class="form-check-label me-3" for="write">Write/Store</label>
                            <div>
                                @Html.TextBoxFor(
                                    m => m.SelectedWriteData,
                                    new { @class = "form-control", placeholder = "Data" })
                            </div>
                        </div>

                        
                    </div>
                    <div class="mb-3">
                        @Html.TextBoxFor(
                            m => m.SelectedCurrentAddress,
                            new { @class = "form-control", placeholder = "Hex number < memory size" })
                    </div>
                    
                    <!-- Address Generation Section -->
                    <div class="container mb-3" style="max-width: 350px; margin-left: 0; padding-left: 0;">
                        <div class="d-flex">
                            <div class="container" style="margin-left: 0; padding-left: 0;">
                                
                                <!-- Reset and Submit Buttons -->
                                <div class="container mb-3" style="margin-left: 0; padding-left: 0; width: 100%;">
                                    <button
                                        type="submit"
                                        asp-page-handler="SubmitInstruction"
                                        class="btn btn-primary w-100 mb-3">
                                        Submit
                                    </button>
                                    <div class="d-flex w-auto">
                                        <button
                                            type="submit"
                                            asp-page-handler="StepInstruction"
                                            class="btn btn-primary w-100 me-3">
                                            Step
                                        </button>
                                        <button
                                            type="submit"
                                            asp-page-handler="FastForwardInstruction"
                                            class="btn btn-primary w-100 ms-3">
                                            Fast forward
                                        </button>
                                    </div>
                                    
                                </div>
                                <div class="container" style="margin-left: 0; padding-left: 0; width: 100%;">
                                    <p>Hit rate: @Model.HitRate</p>
                                </div>
                                <div class="container" 
                                     style="margin-left: 0; padding-left: 0; width: 100%; border: solid; padding: 3px; background-color: @Model.ExplanationDivColor">
                                    @if (Model.ExplanationMessage != null)
                                    {
                                        <pre style="color: @Model.ExplanationColor">@Model.ExplanationMessage</pre>
                                    }
                                    else
                                    {
                                        <p>Start the simulator first!</p>
                                    }
                                    
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <h4 class="subtitle-h4">Address:</h4>
                    <table class="table">
                        <thead>
                        <tr>
                            <th scope="col">TAG</th>
                            <th scope="col">INDEX</th>
                            <th scope="col">OFFSET</th>
                        </tr>
                        </thead>
                        <tbody>
                        @if (Model.AddressTableRows != null && Model.AddressTableRows.Any())
                        {
                            foreach (var row in Model.AddressTableRows)
                            {
                                
                                <tr>
                                    @if (Model.StepNo == 0)
                                    {
                                        <td style="background-color: @Model.ExplanationDivColor">@row.Tag</td>
                                        <td style="background-color: @Model.ExplanationDivColor">@row.Index</td>
                                        <td style="background-color: @Model.ExplanationDivColor">@row.Offset</td>
                                    }
                                    else if (Model.Variant == 1)
                                    {
                                        <td>@row.Tag</td>
                                        <td style="background-color: @Model.ExplanationDivColor">@row.Index</td>
                                        <td>@row.Offset</td>
                                    }
                                    else
                                    {
                                        <td>@row.Tag</td>
                                        <td>@row.Index</td>
                                        <td>@row.Offset</td>
                                    }
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="3">No data available</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                    <h4 class="subtitle-h4">Cache table:</h4>
                    <table class="table">
                        <thead>
                        <tr>
                            <th scope="col">Index</th>
                            <th scope="col">IsValid</th>
                            <th scope="col">Tag</th>
                            <th scope="col">Data</th>
                            <th scope="col">IsDirty</th>
                        </tr>
                        </thead>
                        <tbody>
                        @if (Model.CacheLineTableRows != null && Model.CacheLineTableRows.Any())
                        {
                            foreach (var row in Model.CacheLineTableRows)
                            {
                                if (Model.Variant == 1 && Convert.ToInt32(Model.CurrentCacheLineIndex, 2) == Convert.ToInt32(row.Index))
                                {
                                    <tr>
                                        <td style="background-color: @Model.ExplanationDivColor">@row.Index</td>
                                        <td>@row.IsValid</td>
                                        <td>@row.Tag</td>
                                        <td>@row.Data</td>
                                        <td>@row.IsDirty</td>
                                    </tr>
                                }
                                else if (Model.Variant == 2 && Convert.ToInt32(Model.CurrentCacheLineIndex, 2) == Convert.ToInt32(row.Index))
                                {
                                    <tr>
                                        <td>@row.Index</td>
                                        <td style="background-color: @Model.ExplanationDivColor">@row.IsValid</td>
                                        <td style="background-color: @Model.ExplanationDivColor">@row.Tag</td>
                                        <td>@row.Data</td>
                                        <td>@row.IsDirty</td>
                                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <td>@row.Index</td>
                                        <td>@row.IsValid</td>
                                        <td>@row.Tag</td>
                                        <td>@row.Data</td>
                                        <td>@row.IsDirty</td>
                                    </tr>
                                }
                                
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="3">No data available</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
                <div>
                    <h4 class="subtitle-h4">System memory:</h4>
                    <div id="scrollableDiv" class="scrollable-div">
                        @if (Model.IsMemoryReady)
                        {
                            foreach (var block in Model.ListOfMemoryBlocks)
                            {
                                if (Model.CurrentMemoryBlockIndex != -1)
                                {
                                    if (block == Model.ListOfMemoryBlocks[Model.CurrentMemoryBlockIndex])
                                    {
                                        <p class="selected-memory-block-p">@block</p>
                                    }
                                    else
                                    {
                                        <p>@block</p>
                                    }
                                }
                                else
                                {
                                    <p>@block</p>
                                }
                            }
                        }
                        @if (!Model.IsMemoryReady)
                        {
                            <p>Submit cache settings to generate system memory</p>
                        }
                    </div>

                    <script>
                        document.addEventListener("DOMContentLoaded", function () {
                            const scrollableDiv = document.getElementById("scrollableDiv");
                            const selectedBlock = scrollableDiv.querySelector(".selected-memory-block-p");
                            if (selectedBlock) {
                                selectedBlock.scrollIntoView({ behavior: "smooth", block: "center" });
                            }
                        });
                    </script>
                </div>
            </div>
        </div>
    </div>
        
</form>


